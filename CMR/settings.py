"""
Django settings for CMR project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import sys
from email.utils import parseaddr
from pathlib import Path

import environ

SITE_ID = 1

# Set up `env` object
env = environ.Env(DEBUG=(bool, False))  # Set casting and default value

# fmtoff
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_DIR = Path(__file__).resolve().parent
# PROJECT_DIR = Path(__file__).absolute().parent

# Read environment variables from `.env` file
try:
    command = sys.argv[1]
except IndexError:
    command = 'help'

if command != 'test':
    environ.Env.read_env(BASE_DIR / '.env')

# False if not in os.environ because of casting above
DEBUG = env('DEBUG')

# Should robots.txt allow everything to be crawled?
ALLOW_ROBOTS = False

# Domains for DEV and PROD
LOCAL_DEV_DOMAIN = env('LOCAL_DEV_DOMAIN')
PROD_DOMAIN = env('PROD_DOMAIN')

# Raises Django's ImproperlyConfigured
# exception if SECRET_KEY not in os.environ
#
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# NOTE: How to Secure Your Django App – Best Practices and Code Examples
# https://www.freecodecamp.org/news/how-to-secure-your-django-app/
# https://dev.to/topunix/building-a-fort-django-security-best-practices-4fa4

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# Parse database connection url strings
# like psql://user:pass@127.0.0.1:8458/db
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    # Read os.environ['DATABASE_URL'] and raise
    # ImproperlyConfigured exception if not found
    #
    # The db() method is an alias for db_url().
    'default': env.db(),
    # Read os.environ['SQLITE_URL']
    'extra': env.db_url('SQLITE_URL', default='sqlite:////tmp/my-tmp-sqlite.db'),
}

# TODO -- NEED TO CONFIGURE CACHE!!!
# CACHES = {
#     # Read os.environ['CACHE_URL'] and raises
#     # ImproperlyConfigured exception if not found.
#     #
#     # The cache() method is an alias for cache_url().
#     'default': env.cache(),

#     # Read os.environ['REDIS_URL']
#     'redis': env.cache_url('REDIS_URL')
# }


CMS_CONFIRM_VERSION4 = True  # Required by `django-cms`

ALLOWED_HOSTS = []

# 'allauth' settings
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django_extensions',
    'django_filters',
    'imagekit',
    'accounts',
    'rest_framework',
    'corsheaders',
    # -- 'allauth' apps ---------------
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.openid',
    # -- 'wagtail' apps ------------
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail.api.v2',
    'wagtail.locales',
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.contrib.routable_page',
    'wagtail.contrib.table_block',
    'wagtail.contrib.typed_table_block',
    'wagtail.contrib.search_promotions',
    'wagtail.contrib.settings',
    'wagtail.contrib.simple_translation',
    'wagtail.contrib.styleguide',
    'wagtail',
    'taggit',
    'modelcluster',
    # 'wagtailfontawesomesvg',
    # ---------------------------------
    # 'blog',
    # 'events',
    'home',
    # 'locations',
    # 'roadnames',
    # 'cmr_layouts',
    # 'cmr_pages',
    # 'cmr_projects',
    # 'nrhs_pages',
    # 'nrhs_projects',
]
AUTH_USER_MODEL = 'accounts.CustomUser'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',  # Required by `wagtail`
    'allauth.account.middleware.AccountMiddleware',  # Required by `allauth`
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',  # Required by `wagtail`
]
ROOT_URLCONF = 'CMR.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'wagtail.contrib.settings.context_processors.settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'CMR.wsgi.application'

# CORS Headers
# https://github.com/adamchainz/django-cors-headers
CORS_ALLOWED_ORIGINS = [
    'https://f451labs.dev',
    'https://f451labs.com',
    'https://cmr.f451labs.dev',
    'https://cmr.f451labs.com',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

ACCOUNT_EMAIL_REQUIRED = True  # Required by `allauth`
ACCOUNT_EMAIL_VERIFICATION = env('ACCOUNT_EMAIL_VERIFICATION')  # Required by `allauth`
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'media',
]

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

WAGTAILADMIN_BASE_URL = '/admin/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_LIST_LEN = 10

# 'allauth' Provider specific settings
# https://docs.allauth.org/en/latest/introduction/index.html
SOCIALACCOUNT_PROVIDERS = {
    # For each OAuth based provider, either add a ``SocialApp``
    # (``socialaccount`` app) containing the required client
    # credentials, or list them here:
    'github': {
        'SCOPE': [
            'read:user',
            'user:email',
        ],
    },
    'google': {
        'APP': {
            'client_id': env('GOOGLE_SOCIAL_AUTH_CLIENT_ID'),
            'secret': env('GOOGLE_SOCIAL_AUTH_CLIENT_SECRET'),
            'key': env('GOOGLE_SOCIAL_AUTH_CLIENT_KEY'),
        }
    },
}

# -- Misc. settings --
ADMINS = tuple(parseaddr(email) for email in env.list('ADMINS'))
MANAGERS = tuple(parseaddr(email) for email in env.list('MANAGERS'))

TESTING = 'test' in sys.argv

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    # WAGTAILADMIN_BASE_URL required for notification emails
    WAGTAILADMIN_BASE_URL = 'http://localhost:8000'
    ALLOWED_HOSTS = ['*']

    if not TESTING:
        # Required by `django-debug-toolbar`
        INTERNAL_IPS = ['127.0.0.1']

        INSTALLED_APPS = [
            *INSTALLED_APPS,
            'debug_toolbar',
        ]
        MIDDLEWARE = [
            'debug_toolbar.middleware.DebugToolbarMiddleware',
            *MIDDLEWARE,
        ]


# -- Wagtail settings --
WAGTAIL_SITE_NAME = 'cmr'

WAGTAIL_I18N_ENABLED = True

WAGTAIL_CONTENT_LANGUAGES = LANGUAGES = [
    ('en', 'English'),
]

WAGTAILIMAGES_AVIF_QUALITY = 60

# ADMIN_PASSWORD = env('ADMIN_PASSWORD', 'changeme')

# Content Security policy settings
# http://django-csp.readthedocs.io/en/latest/configuration.html

# Only enable CSP when enabled through environment variables.
# if "CSP_DEFAULT_SRC" in os.environ:
#     MIDDLEWARE.append("csp.middleware.CSPMiddleware")

#     # Only report violations, don't enforce policy
#     CSP_REPORT_ONLY = True

#     # The “special” source values of 'self', 'unsafe-inline', 'unsafe-eval', and 'none' must be quoted!
#     # e.g.: CSP_DEFAULT_SRC = "'self'" Without quotes they will not work as intended.

#     CSP_DEFAULT_SRC = os.environ.get("CSP_DEFAULT_SRC").split(",")
#     if "CSP_SCRIPT_SRC" in os.environ:
#         CSP_SCRIPT_SRC = os.environ.get("CSP_SCRIPT_SRC").split(",")
#     if "CSP_STYLE_SRC" in os.environ:
#         CSP_STYLE_SRC = os.environ.get("CSP_STYLE_SRC").split(",")
#     if "CSP_IMG_SRC" in os.environ:
#         CSP_IMG_SRC = os.environ.get("CSP_IMG_SRC").split(",")
#     if "CSP_CONNECT_SRC" in os.environ:
#         CSP_CONNECT_SRC = os.environ.get("CSP_CONNECT_SRC").split(",")
#     if "CSP_FONT_SRC" in os.environ:
#         CSP_FONT_SRC = os.environ.get("CSP_FONT_SRC").split(",")
#     if "CSP_BASE_URI" in os.environ:
#         CSP_BASE_URI = os.environ.get("CSP_BASE_URI").split(",")
#     if "CSP_OBJECT_SRC" in os.environ:
#         CSP_OBJECT_SRC = os.environ.get("CSP_OBJECT_SRC").split(",")

# fmton
